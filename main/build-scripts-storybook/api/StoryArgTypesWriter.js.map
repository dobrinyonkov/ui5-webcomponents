{"version":3,"file":"StoryArgTypesWriter.js","sourceRoot":"","sources":["../../../build-scripts-storybook/api/StoryArgTypesWriter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,aAAa,CAAC;AAC7B,OAAO,IAAI,MAAM,MAAM,CAAC;AAexB,MAAM,OAAO,mBAAmB;IAGrB,aAAa,CAChB,SAAiB,EACjB,SAAqB,EACrB,WAAyB,EACzB,sBAA+C;QAE/C,MAAM,QAAQ,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC;QAC3C,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,EAAE,EAAE;YAC7D,MAAM,OAAO,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC;YAEtC,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE;gBACzB,uCAAuC;gBACvC,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CACvB,SAAS,EACT,WAAW,EACX,KAAK,EACL,mBAAmB,CAAC,uBAAuB,CAC9C,CAAC;gBAEF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CACnC,SAAS,EACT,KAAK,EACL,sBAAsB,CACzB,CAAC;gBAEF,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;aAC7C;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAEO,YAAY,CAChB,SAAqB,EACrB,KAAa,EACb,sBAA+C;QAE/C,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAClD,MAAM,IAAI,KAAK,CAAC,+BAA+B,KAAK,EAAE,CAAC,CAAC;SAC3D;QAED,MAAM,UAAU,GAAG,sBAAsB,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC/D,MAAM,OAAO,GAAG,sBAAsB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACzD,MAAM,KAAK,GAAG,sBAAsB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrD,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QAE3C,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAChE,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;YACxB,GAAG,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC;YACjC,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC;SACjC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAEZ,MAAM,OAAO,GAAG,kBAAkB,IAAI;+BACf,IAAI;;EAEjC,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,QAAQ,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;EAC/D,CAAC;QACK,OAAO,OAAO,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,IAAY,EAAE,IAAY,EAAE,KAAa;QACrD,IAAI;YACA,MAAM,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAC/B,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,kCAAkC,CAAC,CAAC;SAChE;QAAC,OAAO,GAAG,EAAE;YACV,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACtB;IACL,CAAC;;AArEuB,2CAAuB,GAAG,aAAa,CAAC","sourcesContent":["import fs from \"fs/promises\";\nimport path from \"path\";\n\nimport type { IApiReader } from \"./ApiReader\";\nimport type { IStoryArgTypesGenerator } from \"./StoryArgTypesGenerator\";\nimport type { IStoryReader } from \"./StoryReader\";\n\nexport interface IStoryArgTypesWriter {\n    writeArgTypes(\n        directory: string,\n        apiReader: IApiReader,\n        storyReader: IStoryReader,\n        storyArgTypesGenerator: IStoryArgTypesGenerator\n    ): Promise<void[]>;\n}\n\nexport class StoryArgTypesWriter implements IStoryArgTypesWriter {\n    private static readonly STORIES_WRITE_FILE_NAME = \"argTypes.ts\";\n\n    public writeArgTypes(\n        directory: string,\n        apiReader: IApiReader,\n        storyReader: IStoryReader,\n        storyArgTypesGenerator: IStoryArgTypesGenerator\n    ): Promise<void[]> {\n        const packages = storyReader.getPackages();\n        const promises = Object.keys(packages).map(async (packageName) => {\n            const stories = packages[packageName];\n\n            for (const story of stories) {\n                // write the argTypes to the story file\n                const storyPath = path.join(\n                    directory,\n                    packageName,\n                    story,\n                    StoryArgTypesWriter.STORIES_WRITE_FILE_NAME\n                );\n\n                const content = await this.generateFile(\n                    apiReader,\n                    story,\n                    storyArgTypesGenerator\n                );\n\n                this.writeFile(storyPath, content, story);\n            }\n        });\n\n        return Promise.all(promises);\n    }\n\n    private generateFile(\n        apiReader: IApiReader,\n        story: string,\n        storyArgTypesGenerator: IStoryArgTypesGenerator\n    ) {\n        if (!storyArgTypesGenerator.getArgTypes().get(story)) {\n            throw new Error(`No argTypes found for story ${story}`);\n        }\n\n        const properties = storyArgTypesGenerator.getProperties(story);\n        const methods = storyArgTypesGenerator.getMethods(story);\n        const slots = storyArgTypesGenerator.getSlots(story);\n        const slotNames = Array.from(slots.keys());\n\n        const info = JSON.stringify(apiReader.findInfo(story), null, 4);\n        const args = JSON.stringify({ \n            ...Object.fromEntries(properties), \n            ...Object.fromEntries(methods), \n        }, null, 4);\n\n        const content = `export default ${args};\nexport const componentInfo = ${info};\nexport type StoryArgsSlots = {\n${slotNames.map((slotName) => `${slotName}: string;`).join(\"\\n\t\")}\n}`;\n        return content;\n    }\n\n    async writeFile(path: string, data: string, story: string) {\n        try {\n            await fs.writeFile(path, data);\n            console.log(`File ${story}/argType.ts written successfully`);\n        } catch (err) {\n            console.error(err);\n        }\n    }\n}\n"]}