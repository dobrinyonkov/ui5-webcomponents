{"version":3,"file":"StoryArgTypesGenerator.js","sourceRoot":"","sources":["../../../build-scripts-storybook/api/StoryArgTypesGenerator.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,sBAAsB,EAAE,MAAM,qCAAqC,CAAC;AAC7E,OAAO,EAAE,iBAAiB,EAAE,MAAM,gCAAgC,CAAC;AACnE,OAAO,EAAE,mBAAmB,EAAE,MAAM,kCAAkC,CAAC;AAUvE,MAAM,OAAO,sBAAsB;IAI/B,YACI,aAA2B;QACvB,IAAI,iBAAiB,EAAE;QACvB,IAAI,sBAAsB,EAAE;QAC5B,IAAI,mBAAmB,EAAE;KAC5B;QAED,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;IAC9B,CAAC;IAEQ,QAAQ,CAAC,SAAgC,EAAE,SAAqB;QACrE,MAAM,MAAM,GAAuC,IAAI,GAAG,EAAE,CAAC;QAE7D,KAAK,MAAM,GAAG,IAAI,SAAS,EAAE;YACzB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;gBAC5B,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;aACxC;YAED,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,UAAU,EAAE;gBACrC,IAAI,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oBACxB,MAAM,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;oBACrD,IAAI,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;wBAChD,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;qBACvD;iBACJ;aACJ;SACJ;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,gBAAgB,CAAC,SAA6C,EAAE,SAAqB;QACxF,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YAC7B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,WAAW;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAEM,QAAQ,CAAC,aAAqB;QACjC,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;QAE5D,OAAO,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;IAC7B,CAAC;IAEM,aAAa,CAAC,aAAqB;QACtC,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC;QAEjE,OAAO,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;IAC7B,CAAC;IAEM,UAAU,CAAC,aAAqB;QACnC,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC;QAE9D,OAAO,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;IAC7B,CAAC;CACJ","sourcesContent":["import type { IApiReader, IComponentParsedAPI } from \"./ApiReader\";\nimport type { IGenerator } from \"./generators/ArgGenerator\";\nimport type { InputType as IArgType } from \"@storybook/types\";\n\nimport { ArgPropertiesGenerator } from \"./generators/ArgPropertiesGenerator\";\nimport { ArgSlotsGenerator } from \"./generators/ArgSlotsGenerator\";\nimport { ArgMethodsGenerator } from \"./generators/ArgMethodsGenerator\";\n\nexport interface IStoryArgTypesGenerator {\n    generateArgTypes(parsedApi: Map<string, IComponentParsedAPI[]>, apiReader: IApiReader): void;\n    getArgTypes(): Map<string, Map<string, Map<string, IArgType>>>;\n    getSlots(componentName: string): Map<string, IArgType>;\n    getProperties(componentName: string): Map<string, IArgType>;\n    getMethods(componentName: string): Map<string, IArgType>;\n}\n\nexport class StoryArgTypesGenerator implements IStoryArgTypesGenerator {\n    private argTypes: Map<string, Map<string, Map<string, IArgType>>>;\n    private generators: IGenerator[];\n\n    constructor(\n        generators: IGenerator[] = [\n            new ArgSlotsGenerator(),\n            new ArgPropertiesGenerator(),\n            new ArgMethodsGenerator(),\n        ]\n    ) {\n        this.generators = generators;\n        this.argTypes = new Map();\n    }\n\n     private generate(parsedApi: IComponentParsedAPI[], apiReader: IApiReader): Map<string, Map<string, IArgType>> {\n        const result: Map<string, Map<string, IArgType>> = new Map();\n\n        for (const api of parsedApi) {\n            if (!result.has(api.fieldName)) {\n                result.set(api.fieldName, new Map());\n            }\n\n            for (const generator of this.generators) {\n                if (generator.isMatch(api)) {\n                    const generated = generator.generate(api, apiReader);\n                    if (generated && Object.keys(generated).length > 0) {\n                        result.get(api.fieldName)?.set(api.name, generated);\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    public generateArgTypes(parsedApi: Map<string, IComponentParsedAPI[]>, apiReader: IApiReader) {\n        parsedApi.forEach((value, key) => {\n            this.argTypes.set(key, this.generate(value, apiReader));\n        });\n    }\n\n    public getArgTypes(): Map<string, Map<string, Map<string, IArgType>>> {\n        return this.argTypes;\n    }\n\n    public getSlots(componentName: string): Map<string, IArgType> {\n        const args = this.argTypes.get(componentName)?.get(\"slots\");\n\n        return args ?? new Map();\n    }\n\n    public getProperties(componentName: string): Map<string, IArgType> {\n        const args = this.argTypes.get(componentName)?.get(\"properties\");\n\n        return args ?? new Map();\n    }\n\n    public getMethods(componentName: string): Map<string, IArgType> {\n        const args = this.argTypes.get(componentName)?.get(\"methods\");\n\n        return args ?? new Map();\n    }\n}\n"]}