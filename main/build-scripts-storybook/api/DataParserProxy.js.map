{"version":3,"file":"DataParserProxy.js","sourceRoot":"","sources":["../../../build-scripts-storybook/api/DataParserProxy.ts"],"names":[],"mappings":"AAEA,MAAM,YAAY,GAAG;IACjB,cAAc;IACd,cAAc;IACd,kBAAkB;IAClB,QAAQ;IACR,kBAAkB;IAClB,WAAW;IACX,OAAO;IACP,WAAW;IACX,gBAAgB;IAChB,qBAAqB;IACrB,aAAa;IACb,iBAAiB;IACjB,uBAAuB;IACvB,kBAAkB;IAClB,mBAAmB;IACnB,YAAY;IACZ,WAAW;IACX,gBAAgB;IAChB,yBAAyB;CAC5B,CAAC;AAEF,MAAM,gBAAgB,GAAG;IACrB,YAAY;IACZ,OAAO;IACP,SAAS;IACT,QAAQ;CACX,CAAC;AAMF,MAAM,OAAO,eAAe;IACxB,KAAK,CAAC,SAAqB,EAAE,OAAiB;QAC1C,IAAI,iBAAiB,GAAG,IAAI,GAAG,EAAiC,CAAC;QAEjE,OAAO,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;YAC1B,IAAI,MAAM,GAA0B,EAAE,CAAC;YACvC,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAE1C,IAAI,IAAI,EAAE;gBACN,gBAAgB,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;oBACnC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAiC,CAAoB,CAAC;oBAE7E,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;wBAC1B,MAAM,GAAG,CAAC,GAAG,MAAM,EAAE,GAAG,SAAS;iCAC5B,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,KAAK,QAAQ,CAAC;iCACnF,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;qBACjD;gBACL,CAAC,CAAC,CAAC;gBAEH,IAAI,IAAI,CAAC,OAAO,EAAE;oBACd,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;oBACzD,MAAM,GAAG,CAAC,GAAG,MAAM,EAAE,GAAG,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;iBAC/D;aACJ;YAED,iBAAiB,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,OAAO,iBAAiB,CAAC;IAC7B,CAAC;CACJ","sourcesContent":["import { IApiReader, IComponentAPI, IComponentData, IComponentParsedAPI } from \"./ApiReader\";\n\nconst EXCLUDE_LIST = [\n    \"effectiveDir\",\n    \"isUI5Element\",\n    \"attachInvalidate\",\n    \"define\",\n    \"detachInvalidate\",\n    \"fireEvent\",\n    \"focus\",\n    \"getDomRef\",\n    \"getFocusDomRef\",\n    \"getFocusDomRefAsync\",\n    \"getMetadata\",\n    \"getSlottedNodes\",\n    \"getUniqueDependencies\",\n    \"onAfterRendering\",\n    \"onBeforeRendering\",\n    \"onEnterDOM\",\n    \"onExitDOM\",\n    \"onInvalidation\",\n    \"getStaticAreaItemDomRef\",\n];\n\nconst INCLUDE_API_LIST = [\n    \"properties\",\n    \"slots\",\n    \"methods\",\n    \"events\",\n];\n\nexport interface IDataParser {\n    parse(apiReader: IApiReader, stories: string[]): Map<string, IComponentParsedAPI[]>;\n}\n\nexport class DataParserProxy implements IDataParser {\n    parse(apiReader: IApiReader, stories: string[]): Map<string, IComponentParsedAPI[]> {\n        let parsedStoriesData = new Map<string, IComponentParsedAPI[]>();\n\n        stories.forEach((storyName) => {\n            let parsed: IComponentParsedAPI[] = [];\n            const data = apiReader.findApi(storyName);\n\n            if (data) {\n                INCLUDE_API_LIST.forEach((fieldName) => {\n                    const fieldData = data[fieldName as keyof IComponentData] as IComponentAPI[];\n\n                    if (Array.isArray(fieldData)) {\n                        parsed = [...parsed, ...fieldData\n                            .filter((item) => !EXCLUDE_LIST.includes(item.name) && item.visibility === \"public\")\n                            .map((item) => ({ ...item, fieldName }))];\n                    }\n                });\n\n                if (data.extends) {\n                    const parentData = this.parse(apiReader, [data.extends]);\n                    parsed = [...parsed, ...parentData.get(data.extends) || []];\n                }\n            }\n\n            parsedStoriesData.set(storyName, parsed);\n        });\n\n        return parsedStoriesData;\n    }\n}"]}